<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>FSharp.ViewModule</name></assembly>
<members>
<member name="">

</member>
<member name="F:FSharp.ViewModule.DependencyTracker.SynchronizationContext@">
<summary>
 Optional context used to raise all property changed notifications.  If null, they&apos;ll get raised directly.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:FSharp.ViewModule.DependencyTracker.SynchronizationContext(System.Threading.SynchronizationContext)">
<summary>
 Optional context used to raise all property changed notifications.  If null, they&apos;ll get raised directly.
</summary>
</member>
<member name="P:FSharp.ViewModule.DependencyTracker.SynchronizationContext">
<summary>
 Optional context used to raise all property changed notifications.  If null, they&apos;ll get raised directly.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.ViewModule.DependencyTracker">
<summary>
 Default implementation of IDependencyTracker which can be used for any relevent ViewModel
 if an implementation does not already exist for the given framework
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.ViewModule.IAsyncNotifyCommand">
 <summary>Extension of INotifyCommand with a public property to supply a CancellationToken.</summary>
 <remarks>This allows the command to change the token for subsequent usages if required</remarks>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharp.ViewModule.INotifyCommand.RaiseCanExecuteChanged">
<summary>
 Trigger the CanExecuteChanged event for this specific ICommand
</summary>
</member>
<member name="T:FSharp.ViewModule.INotifyCommand">
 <summary>Extension of ICommand with a public method to fire the CanExecuteChanged event</summary>
 <remarks>This type should provide a constructor which accepts an Execute (obj -> unit) and CanExecute (obj -> bool) function</remarks>
</member>
<member name="P:FSharp.ViewModule.INotifyingValue`1.Value(`0)">
<summary>
 Extracts the current value from the backing storage
</summary>
</member>
<member name="P:FSharp.ViewModule.INotifyingValue`1.Value">
<summary>
 Extracts the current value from the backing storage
</summary>
</member>
<member name="T:FSharp.ViewModule.INotifyingValue`1">
<summary>
 Encapsulation of a value which handles raising property changed automatically in a clean manner
</summary>
</member>
<member name="">

</member>
<member name="T:FSharp.ViewModule.IRaisePropertyChanged">
<summary>
 Interface used to explicitly raise PropertyChanged
</summary>
</member>
<member name="M:FSharp.ViewModule.IValidationTracker.SetPropertyValidationResult(FSharp.ViewModule.ValidationResult)">
<summary>
 Set a validation result tied to and generated by a specific property
</summary>
</member>
<member name="M:FSharp.ViewModule.IValidationTracker.SetEntityValidationResult(FSharp.ViewModule.ValidationResult)">
<summary>
 Set a validation result generated by the entity level validation
</summary>
</member>
<member name="M:FSharp.ViewModule.IValidationTracker.Revalidate(System.String)">
<summary>
 Force a re-computation of a specific property&apos;s validation results
</summary>
</member>
<member name="M:FSharp.ViewModule.IValidationTracker.ClearErrors">
<summary>
 Clear all errors from the validation
</summary>
</member>
<member name="M:FSharp.ViewModule.IValidationTracker.AddPropertyValidationWatcher(System.String,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Collections.FSharpList{System.String}})">
<summary>
 Add a watcher for a property to validate
</summary>
</member>
<member name="T:FSharp.ViewModule.IValidationTracker">
<summary>
 Used to track validation errors
</summary>
</member>
<member name="P:FSharp.ViewModule.IViewModel.OperationExecuting(System.Boolean)">
<summary>
 Value used to notify view that an asynchronous operation is executing
</summary>
</member>
<member name="P:FSharp.ViewModule.IViewModel.OperationExecuting">
<summary>
 Value used to notify view that an asynchronous operation is executing
</summary>
</member>
<member name="P:FSharp.ViewModule.IViewModel.DependencyTracker">
<summary>
 Handles management of dependencies for all computed properties 
 as well as ICommand dependencies
</summary>
</member>
<member name="T:FSharp.ViewModule.IViewModel">
 <summary>Extension of INotifyPropertyChanged with a public method to fire the PropertyChanged event</summary>
 <remarks>This type should provide a constructor which accepts no arguments, and one which accepts a Model</remarks>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.ViewModule.ValidationResult">
<summary>
 Results of a validation for the member of a type or an entity.  errorKey is a string identifier unique per &quot;error case&quot;
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.ViewModule.AssemblyInfo.AssemblyVersionInformation">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.ViewModule.CollectionHelpers">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.ViewModule.Commands">
<summary>
 Module containing Command factory methods to create ICommand implementations
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.ViewModule.Helpers">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:FSharp.ViewModule.Internal.ViewModelUntyped.OperationExecuting(System.Boolean)">
<summary>
 Value used to notify view that an asynchronous operation is executing
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:FSharp.ViewModule.Internal.ViewModelUntyped.ValidationTracker">
<summary>
 Manages tracking of validation information for the entity
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:FSharp.ViewModule.Internal.ViewModelUntyped.OperationExecuting">
<summary>
 Value used to notify view that an asynchronous operation is executing
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:FSharp.ViewModule.Internal.ViewModelUntyped.DependencyTracker">
<summary>
 Handles management of dependencies for all computed properties 
 as well as ICommand dependencies
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.ViewModule.Progress.ProgressReporting">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.ViewModule.Utilities">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharp.ViewModule.Validation.Validators.resultWithError``1(System.String,FSharp.ViewModule.Validation.ValidationResult{``0})">
<summary>
 Produces a result of the validation, using a custom error message if an error occurred
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharp.ViewModule.Validation.Validators.validate``1(System.String,``0)">
<summary>
 Begin a validation chain for a given property name
</summary>
</member>
<member name="M:FSharp.ViewModule.Validation.Validators.fixErrorsWithMessage``1(System.String,FSharp.ViewModule.Validation.ValidationResult{``0})">
<summary>
 Fix the current state of errors, bypassing all future validation checks if we&apos;re in an error state
 Also supplies a custom error message to replace the existing
</summary>
</member>
<member name="M:FSharp.ViewModule.Validation.Validators.fixErrors``1(FSharp.ViewModule.Validation.ValidationResult{``0})">
<summary>
 Fix the current state of errors, bypassing all future validation checks if we&apos;re in an error state
</summary>
</member>
<member name="M:FSharp.ViewModule.Validation.Validators.custom``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{System.String}},FSharp.ViewModule.Validation.ValidationResult{``0})">
<summary>
 Create a custom validator using a predicate (&apos;a -&gt; bool) and an error message on failure. The error message can use {0} for a placeholder for the property name.
</summary>
</member>
<member name="T:FSharp.ViewModule.Validation.Validators">

</member>
</members>
</doc>
